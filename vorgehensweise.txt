Input-Format

абера́ція; спотво́рення; спотво́рювання; [опт.] 
абера́ція; збо́чення; збо́чування


----------------------------
Vorverarbeitung (Doc to Txt)

Leerzeilen entfernen, Zeilen mit Alphabet-Buchstaben entfernen	OK


Zeilen ignorieren mit Buchstabe. am Anfang, z.B.	OK
а. куля́ста, а. сфери́чна /+/ а. сфері́йна
auch mit zwei Buchstaben, z.B.
дж. жи́влення запасне́; дж. жи́влення резе́рвне

[опт.]: Domäne
/+/ und - (wie Komma), ignorieren

{Я/КРД} erst mal ignorieren	OK

-а, ignorieren	OK
(*)	OK

alle Zeilen mit – див. in der Mitte ignorieren	OK

Leerzeichen nach Semikolon entfernen, z.B.	OK
абера́ція; спотво́рення 
абера́ція;спотво́рення

Semikolon am Ende einer Zeile entfernen, z.B.	OK
афі́нність;спорі́дненість;
афі́нність;спорі́дненість

Leerzeichen am Zeilenende entfernen, z.B.	OK
багатогра́нник;поліе́др 
багатогра́нник;поліе́др

Semikolons in Klammern durch Kommas ersetzen	OK

Alles in Klammern löschen	OK

Durch Silbentrennung in Word bleiben einige Bindestriche erhalten. Diese von Hand korrigieren	OK

Regulärer Ausdruck für Ukrainisch: [А-ЩодоЙогоҐЄІЇа-щодойогоськґєії]
-> Man kann auch mit NOT arbeiten, z.B. [^;^\r]+: ein oder mehrere Zeichen, kein Semikolon oder Zeilenende

-------------------------------------------------------
ua_dict_reader.py

POS:
n, außer bei Endungen ти, тися, тись, dann ist es v
spacy hat auch ein ukrainisches Modell, das wir aber erst mal nicht genutzt haben.

Bei Mehrwortlexemen den POS des ersten Wortes nehmen, z.B.
'става́ти бі́льшим' (V)

Test, ob alle POS in einem Synset übereinstimmen.

--> ua-lexentries.txt
--> ua-synsets.txt

manuell eine Python-Liste daraus machen: ua_lex_entries.py (lexlist = [)
------------------------------------------------------------------
sort_lexlist.py

Lexliste clustern, sodass dieselben Lemmata in einer Liste stehen, z.B.
[('спотво́рення', 'ukrajinet-1-n'), ('спотво́рення', 'ukrajinet-2796-n')],
--> ua-sorted-lexentries.txt

manuell ua-sorted-lexentries.txt in eine Python-Liste konvertieren: wordlists.py (wordlists = [)

----------------------------------------------------
compile_lexentries.py

Aus der Liste der Lexikoneinträge eine Datei mit LexEntries machen, z.B.

<LexicalEntry id="w2">
	<Lemma writtenForm="спотво́рення" partOfSpeech="n"/>
	<Sense id="w2_1-n" synset="ukrajinet-1-n"/>
	<Sense id="w2_2796-n" synset="ukrajinet-2796-n"/>
</LexicalEntry>

--> ua_xml_lexentries.xml
----------------------------------------------------------------------
Manuell ua-synsets.txt in ua_synsets.py konvertieren:

	- Format:
		synsets = [
			("1-n"),
			("2-n"),
			("3-n"),
			("4-n"),
			("5-n"),
			("6-n"),
			...
			]

---------------------------------------------------------------
compile_synsets.py

ua_synsets.py in Wordnet-XML konvertieren (ua_synsets.xml):

<Synset id="ukrajinet-4-n" ili="" partOfSpeech="n"/>

---------------------------------------------------------------
Alles zusammen in ein Wordnet-File schreiben:

Header + Schluss (aus ukrainian_wordnet_drumherum.xml)
LexicalEntries (aus ua_xml_lexentries.xml)
Synsets (aus ua_synsets.xml)


--> ukrainian_wordnet_v3.xml

----------------------------------------------------------------
testen: validate_ukrajinet.py
--> es waren doppelte Wörter in einem Synset in der Liste, z.B. -ті́л

----------------------------------------------------------------
ab hier: ILI-Generierung

Übersetzungstabelle aus EWN/OdeNet ins Ukrainische übersetzen
--> translation_table.tsv


Synsets mit ihren Wörtern auf die Übersetzungstabelle abbilden und ILIs übernehmen:
add_ili_to_ukrajinet.py

für jedes Synset in Ukrajinet die Wörter in der Übersetzungstabelle suchen und die entsprechenden ILIs raussuchen.
--> synsets_and_ilis.tsv

Dann die eindeutigen ILI-Zuordnungen in ein Dictionary eintragen und dann schon mal in Ukrajinet eintragen: add_to_nonambiguous_synsets

Achtung, dabei kann dasselbe ili zu zwei verschiedenen Synsets zugewiesen werden. Diese Fälle (103) werden ausgenommen.
--> 571 ILIs

verschiedene Synsets für ein ILI: ['i61928', 'i58289', 'i67696', 'i67313', 'i54274', 'i54274', 'i54274', 'i52822', 'i82519', 'i63415', 'i24069', 'i33766', 'i113539', 'i93676', 'i109547', 'i62946', 'i89195', 'i89195', 'i41847', 'i41847', 'i41847', 'i59952', 'i39976', 'i67528', 'i31971', 'i116632', 'i34143', 'i38381', 'i38744', 'i64178', 'i53934', 'i63729', 'i67931', 'i67931', 'i53866', 'i68379', 'i66430', 'i36547', 'i63516', 'i74032', 'i70279', 'i74032', 'i67806', 'i109573', 'i66997', 'i60474', 'i60572', 'i62552', 'i24118', 'i36542', 'i67929', 'i112865', 'i81624', 'i81624', 'i81624', 'i50726']
